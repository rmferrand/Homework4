[
  {
    "objectID": "datadelimiting.html",
    "href": "datadelimiting.html",
    "title": "datadelimiting",
    "section": "",
    "text": "Purpose: This program seeks to complete the exercises listed in Homework 4, for ST558. Task 1 consists of conceptual, Exam-like questions. Content includes types of workspaces and file paths. Task 2 consists of reading and manipulating delimited data from webpages, including summary calculations of variables. Task 3 consists of combining excel and delimited data, and mutating various variables. Libraries are loaded in privately."
  },
  {
    "objectID": "datadelimiting.html#task-1-conceptual-questions",
    "href": "datadelimiting.html#task-1-conceptual-questions",
    "title": "datadelimiting",
    "section": "Task 1: Conceptual Questions",
    "text": "Task 1: Conceptual Questions\n\nIf your working directory is myfolder/homework, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nThe biggest benefit I can think of is having all of the scripts and project files in one place. This does wonders for reproducibility and organization. Furthermore, there is no need to setwd at the beginning of each project, since it is automatic (and that makes access to project files much easier). Also, version control is a great feature.\n\nWhat is git and what is github?\n\nGit is an open source project system that allows development and pushing of projects and code. Github is the platform where “repositories” are made that allow people to store code, files, data, and more. Github can also be used to run websites and even games, where someone can run their finalized projects and display the information to the public. “Pushing” and management of code allows for easy cross-platform collaboration.\n\nWhat are the two main differences between a tibble and data.frame?\n\nTibble is a tidyverse specific data frame. With a tibble, the default print() method is fancier, we get information on the number of observations, columns, and since we only see the first few rows and columns it doesn’t clog up our output space. Tibbles also incorporate lazy loading, which means that their code is not incorporated into the memory until it is actually activated. This means they are lazy and complain more, which allows us to notice problems much earlier than data.frames.\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\nNote, arrange(species) is actually optional, but I think it’s GPP to include it, since it is a step that was done above.\n\niris |&gt; \n  arrange(Species) |&gt;\n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length&lt;1.55)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows"
  },
  {
    "objectID": "datadelimiting.html#task-2-reading-delimited-data",
    "href": "datadelimiting.html#task-2-reading-delimited-data",
    "title": "datadelimiting",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\nFirst, using the read_delim function with a comma delimiter, we assign column names and print out the glass_data tibble. Second, using if_else we mutate the Type_of_Glass column to contain the appropriate character names, then filter by Iron and tableware or headlamps.\n\nglass_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\", \n                       delim = \",\",\n                       col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_Glass\")\n)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\nglass_data |&gt;\n  mutate(\n    Type_of_Glass = ifelse(Type_of_Glass == 1, \"building_windows_float_processed\",\n    ifelse(Type_of_Glass == 2, \" building_windows_non_float_processed\",\n    ifelse(Type_of_Glass == 3, \"vehicle_windows_float_processed\",\n    ifelse(Type_of_Glass == 4, \"vehicle_windows_non_float_processed\",\n    ifelse(Type_of_Glass == 5, \"containers\",\n    ifelse(Type_of_Glass == 6, \"tableware\",\n    ifelse(Type_of_Glass == 7, \"headlamps\", NA\n    )))))))) |&gt; \n  filter(Fe &lt;.2, Type_of_Glass == c(\"tableware\", \"headlamps\"))\n\n# A tibble: 20 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0     0    tableware    \n 2   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0     0    tableware    \n 3   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0     0    tableware    \n 4   183  1.52  14.2  0     2.09  72.7  0    10.9   0     0    tableware    \n 5   185  1.51  17.4  0     0.34  75.4  0     6.65  0     0    tableware    \n 6   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19  0    headlamps    \n 7   188  1.52  13.4  3.34  1.23  72.4  0.6   8.83  0     0    headlamps    \n 8   190  1.52  15.8  1.83  1.31  70.4  0.31  8.61  1.68  0    headlamps    \n 9   192  1.52  14.8  0     2.38  73.3  0     8.76  0.64  0.09 headlamps    \n10   194  1.52  14.8  0     2     73.0  0     8.53  1.59  0.08 headlamps    \n11   196  1.52  14.1  0     2.68  73.4  0.08  9.07  0.61  0.05 headlamps    \n12   198  1.52  14.7  0     2.34  73.3  0     8.95  0.66  0    headlamps    \n13   200  1.52  15.0  0     2.51  73.0  0.05  8.83  0.53  0    headlamps    \n14   202  1.52  12.0  0     1.19  75.2  2.7   8.93  0     0    headlamps    \n15   204  1.52  14.8  0     1.99  73.1  0     8.28  1.71  0    headlamps    \n16   206  1.52  15.0  0     1.8   73.0  0     8.61  1.55  0    headlamps    \n17   208  1.52  14.4  0     1.82  72.9  1.41  6.47  2.88  0    headlamps    \n18   210  1.52  14.1  0     2.88  72.6  0.08  9.18  1.06  0    headlamps    \n19   212  1.52  14.4  0     2.02  73.4  0     8.44  1.64  0    headlamps    \n20   214  1.52  14.2  0     2.08  73.4  0     8.62  1.67  0    headlamps    \n\n\nFor the yeast_data, we take a similar process for reading in the data, except the new delimiter is two spaces. In the yeast data, we deselect unnecessary columns, grouping by class to then calculate the median and mean for all the numeric variables.\n\nyeast_data &lt;- read_table(\"https://www4.stat.ncsu.edu/online/datasets/yeast.data\",\n                       col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")\n)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\nyeast_data |&gt; \n  select(-c(seq_name, nuc)) |&gt; \n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean =  mean, median = median), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "datadelimiting.html#task-3-combining-excel-and-delimited-data",
    "href": "datadelimiting.html#task-3-combining-excel-and-delimited-data",
    "title": "datadelimiting",
    "section": "Task 3: Combining Excel and Delimited Data",
    "text": "Task 3: Combining Excel and Delimited Data\nIn the white_wine dataset, we read in the first two sheets, and assign the column names of sheet 2 to the column names of sheet 1. Furthermore, we create a type column indicating that all of the wine is white wine.\n\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\", sheet=excel_sheets(\"white-wine.xlsx\")[1])\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\nwhite_wine2 &lt;-  read_excel(\"white-wine.xlsx\", sheet=excel_sheets(\"white-wine.xlsx\")[2])\nwhite_wine2\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\ncolnames(white_wine) &lt;- white_wine2$Variables\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\nwhite_wine$type &lt;- \"white\"\n\nIn the red_wine dataset, we follow the same process, now denoting the type column as red.\n\nred_wine &lt;- read_delim(\"red-wine.csv\", delim = ';')\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred_wine\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\ncolnames(red_wine) &lt;- white_wine2$Variables\nred_wine$type &lt;- \"red\"\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nTo combine the two datasets, we bind the rows. We then filter by a specific quality and alcohol amount, sort by descending quality, select relevant columns, and then mutate across alcohol, calculating the mean and standard deviation grouped by quality.\n\nall_wine &lt;- dplyr::bind_rows(white_wine, red_wine)\nall_wine |&gt; \n  filter(quality &gt; 6.5, alcohol &lt;132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(fixed_acidity, volatile_acidity, citric_acid, alcohol, type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol, list(mean =mean, sd = sd), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_sd &lt;dbl&gt;"
  }
]